Wildlife Tracker
The Forest Service is considering a proposal from a timber company to clearcut a nearby forest of Douglas Fir. Before this proposal may be approved, they must complete an environmental impact study. You have been asked to build an application that allows Rangers to track wildlife sightings in the area.

The application must track two categories of wildlife:

Animals

At the very least, require:

id
name
Endangered Animals

Due to their dwindling numbers, Rangers must record additional information about EndangeredAnimals:

id
name
health
Use constants to define options like "healthy", "ill", and "okay".
age (an estimated guess by the ranger)
Use constants to define options like "newborn", "young", or "adult".
Each time an animal species of either category is seen, a Sighting must be reported:

Sightings

When wildlife is spotted, a Ranger submits a form to record a Sighting containing the following:

id of Animal or EndangeredAnimal species
location
(Conveyed in any manner you choose ie: "Zone A", "Near the River", "NE Quadrant", or latitude and longitude values are all acceptable.)
rangerName
Exceptions

It may take a few days for new Rangers to familiarize themselves with the app. To avoid saving incomplete or invalid records, throw and catch exceptions if Rangers attempt to submit an incomplete form, or misuse the application in any other conceivable fashion.

Database Naming Requirements
For this code review, use the following database names:

Production Database: wildlife_tracker
Development Database: wildlife_tracker_test
Table Names: animals, sightings
Setup Instructions
In your README, include detailed setup instructions with all commands necessary to re-create your databases, columns, and tables (example below from To Do):

In PSQL:
CREATE DATABASE to_do;
CREATE TABLE categories (id serial PRIMARY KEY, name varchar);
CREATE TABLE tasks (id serial PRIMARY KEY, description varchar);
Further Exploration
If you complete the primary objectives with time to spare, consider adding any combination of the following additional features:

Build a Ranger class. This could include contact information, a badge number, etc. Then, associate each Sighting with a Ranger object instead of just a name. Include a page where users may see all Rangers, and click each to see which Sightings they've reported.
Build a Location class. Associate each Sighting with a Location object instead of just including a location property. Include a page where users may see all Locations in the area, and click one to see all Sightings reported in that region.
Integrate a drop-down menu that allows the Ranger to select which animal species they've seen.
Format timestamps for each sighting, and display in your front-end user interface.
Allow users to sort Sightings by most recent.
Implement a many-to-many relationship. Assume a sighting may now include multiple species, and animals may be included in multiple sightings.
Important: If you update your database structure in any fashion, do not forget to update your README's database setup instructions, including the exact setup steps required to re-create your database.
Brainstorm other errors or misuses of the application that could occur, and include additional exceptions to combat them.
